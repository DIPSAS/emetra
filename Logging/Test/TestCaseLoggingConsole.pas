unit TestCaseLoggingConsole;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Emetra.Logging.Console, Classes, Emetra.Logging.Interfaces;

type
  // Test methods for class TConsoleLogger

  TestTConsoleLogger = class( TTestCase )
  strict private
    fConsoleLogger: TConsoleLogger;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAddStrings;
    procedure TestEnterMethod;
    procedure TestEvent;
    procedure TestEventWithParam;
    procedure TestIncludeCancel;
    procedure TestLeaveMethod;
    procedure TestLogYesNo;
    procedure TestRemovalOfHandlebars;
    procedure TestReset;
    procedure TestSetFilename;
    procedure TestShowMessage;
    procedure TestSilentError;
    procedure TestSilentWarning;
    procedure TestStdFileName;
    procedure TestSuccess;
  end;

implementation

uses
  System.SysUtils, System.UITypes;

procedure TestTConsoleLogger.SetUp;
begin
  fConsoleLogger := TConsoleLogger.Create;
end;

procedure TestTConsoleLogger.TearDown;
begin
  fConsoleLogger.Free;
end;

procedure TestTConsoleLogger.TestAddStrings;
var
  AStrings: TStringList;
begin
  AStrings := TStringList.Create;
  try
    AStrings.Add( 'One' );
    AStrings.Add( 'Two' );
    fConsoleLogger.AddStrings( 'AddStrings', AStrings );
  finally
    AStrings.Free;
  end;
end;

procedure TestTConsoleLogger.TestEnterMethod;
begin
  fConsoleLogger.EnterMethod( Self, Self.ClassName );
end;

procedure TestTConsoleLogger.TestEvent;
begin
  fConsoleLogger.Event( 'Event', ltInfo );
end;

procedure TestTConsoleLogger.TestEventWithParam;
begin
  fConsoleLogger.Event( 'TestEvent(%s)', ['Param'], ltInfo );
end;

procedure TestTConsoleLogger.TestIncludeCancel;
begin
  try
    CheckFalse( fConsoleLogger.LogYesNo( 'Respond with Abort here:', ltMessage, true ) );
  except
    on E: Exception do
      CheckEquals( 'EAbort', E.ClassName );
  end;
end;

procedure TestTConsoleLogger.TestLeaveMethod;
begin
  fConsoleLogger.LeaveMethod( Self, Self.ClassName );
end;

procedure TestTConsoleLogger.TestLogYesNo;
var
  ACancel: Boolean;
begin
  ACancel := false;
  Check( fConsoleLogger.LogYesNo( 'TestLogYesNo: Press Y for Yes ', ltMessage, ACancel ) );
  CheckEquals( mrYes, fConsoleLogger.ModalResult );
  ACancel := true;
  Check( not fConsoleLogger.LogYesNo( 'TestLogYesNo: Press N for No', ltMessage, ACancel ) );
  CheckEquals( mrNo, fConsoleLogger.ModalResult );
end;

procedure TestTConsoleLogger.TestRemovalOfHandlebars;
begin
  CheckFalse( fConsoleLogger.LogYesNo( 'Do you see handlebars {{here}}: Press Y for Yes ', ltMessage ) );
end;

procedure TestTConsoleLogger.TestReset;
begin
  fConsoleLogger.Reset;
  // TODO: Validate method results
end;

procedure TestTConsoleLogger.TestSetFilename;
begin
  fConsoleLogger.SetFilename( fConsoleLogger.GetStandardFileName, true );
end;

procedure TestTConsoleLogger.TestShowMessage;
begin
  fConsoleLogger.ShowMessage( 'This is a ShowMessage call.', ltMessage, maxint );
end;

procedure TestTConsoleLogger.TestSilentError;
begin
  fConsoleLogger.SilentError( 'SilentError' );
end;

procedure TestTConsoleLogger.TestSilentWarning;
begin
  fConsoleLogger.SilentWarning( 'SilentWarning' );
end;

procedure TestTConsoleLogger.TestStdFileName;
var
  ReturnValue: string;
begin
  ReturnValue := fConsoleLogger.GetStandardFileName;
  CheckEquals( 'CON', ReturnValue );
end;

procedure TestTConsoleLogger.TestSuccess;
begin
  fConsoleLogger.SilentSuccess( 'Success' );
end;

initialization

// Register any test cases with the test runner
RegisterTest( TestTConsoleLogger.Suite );

end.
